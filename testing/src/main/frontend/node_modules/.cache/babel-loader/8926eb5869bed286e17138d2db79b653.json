{"ast":null,"code":"import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nconst defaultDatasetIdKey = \"label\";\n\nfunction reforwardRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nfunction setOptions(chart, nextOptions) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\n\nfunction setDatasets(currentData, nextDatasets) {\n  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  const addedDatasets = [];\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return { ...nextDataset\n      };\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction cloneData(data) {\n  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  const nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"dataset\", {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"nearest\", {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"index\", {\n    intersect: true\n  }, false);\n}\n\nfunction ChartComponent(param, ref) {\n  let {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...props\n  } = param;\n  const canvasRef = useRef(null);\n  const chartRef = useRef();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options\n      },\n      plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n  useEffect(() => {\n    renderChart();\n    return () => destroyChart();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width\n  }, props), fallbackContent);\n}\n\nconst Chart = /*#__PURE__*/forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Chart, Object.assign({}, props, {\n    ref: ref,\n    type: type\n  })));\n}\n\nconst Line = /* #__PURE__ */createTypedChart(\"line\", LineController);\nconst Bar = /* #__PURE__ */createTypedChart(\"bar\", BarController);\nconst Radar = /* #__PURE__ */createTypedChart(\"radar\", RadarController);\nconst Doughnut = /* #__PURE__ */createTypedChart(\"doughnut\", DoughnutController);\nconst PolarArea = /* #__PURE__ */createTypedChart(\"polarArea\", PolarAreaController);\nconst Bubble = /* #__PURE__ */createTypedChart(\"bubble\", BubbleController);\nconst Pie = /* #__PURE__ */createTypedChart(\"pie\", PieController);\nconst Scatter = /* #__PURE__ */createTypedChart(\"scatter\", ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"mappings":"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","names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setOptions","chart","nextOptions","options","Object","assign","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","param","height","width","redraw","type","plugins","fallbackContent","updateMode","props","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","config","setTimeout","update","React","canvas","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sources":["C:\\Capstone_Project\\testing\\src\\main\\frontend\\node_modules\\react-chartjs-2\\src\\utils.ts","C:\\Capstone_Project\\testing\\src\\main\\frontend\\node_modules\\react-chartjs-2\\src\\chart.tsx","C:\\Capstone_Project\\testing\\src\\main\\frontend\\node_modules\\react-chartjs-2\\src\\typedCharts.tsx"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart: TypedChartComponent = forwardRef(\n  ChartComponent\n) as TypedChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"]},"metadata":{},"sourceType":"module"}