{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar SPLIT = '__@field_split__';\n/**\n * Convert name path into string to fast the fetch speed of Map.\n */\n\nfunction normalize(namePath) {\n  return namePath.map(function (cell) {\n    return \"\".concat(_typeof(cell), \":\").concat(cell);\n  }) // Magic split\n  .join(SPLIT);\n}\n/**\n * NameMap like a `Map` but accepts `string[]` as key.\n */\n\n\nvar NameMap = /*#__PURE__*/function () {\n  function NameMap() {\n    _classCallCheck(this, NameMap);\n\n    this.kvs = new Map();\n  }\n\n  _createClass(NameMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      this.kvs.set(normalize(key), value);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.kvs.get(normalize(key));\n    }\n  }, {\n    key: \"update\",\n    value: function update(key, updater) {\n      var origin = this.get(key);\n      var next = updater(origin);\n\n      if (!next) {\n        this.delete(key);\n      } else {\n        this.set(key, next);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      this.kvs.delete(normalize(key));\n    } // Since we only use this in test, let simply realize this\n\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      return _toConsumableArray(this.kvs.entries()).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        var cells = key.split(SPLIT);\n        return callback({\n          key: cells.map(function (cell) {\n            var _cell$match = cell.match(/^([^:]*):(.*)$/),\n                _cell$match2 = _slicedToArray(_cell$match, 3),\n                type = _cell$match2[1],\n                unit = _cell$match2[2];\n\n            return type === 'number' ? Number(unit) : unit;\n          }),\n          value: value\n        });\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n      this.map(function (_ref3) {\n        var key = _ref3.key,\n            value = _ref3.value;\n        json[key.join('.')] = value;\n        return null;\n      });\n      return json;\n    }\n  }]);\n\n  return NameMap;\n}();\n\nexport default NameMap;","map":{"version":3,"names":["_slicedToArray","_toConsumableArray","_classCallCheck","_createClass","_typeof","SPLIT","normalize","namePath","map","cell","concat","join","NameMap","kvs","Map","key","value","set","get","update","updater","origin","next","delete","_delete","callback","entries","_ref","_ref2","cells","split","_cell$match","match","_cell$match2","type","unit","Number","toJSON","json","_ref3"],"sources":["C:/Capstone_Project/testing/src/main/frontend/node_modules/rc-field-form/es/utils/NameMap.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar SPLIT = '__@field_split__';\n/**\n * Convert name path into string to fast the fetch speed of Map.\n */\nfunction normalize(namePath) {\n  return namePath.map(function (cell) {\n    return \"\".concat(_typeof(cell), \":\").concat(cell);\n  })\n  // Magic split\n  .join(SPLIT);\n}\n/**\n * NameMap like a `Map` but accepts `string[]` as key.\n */\nvar NameMap = /*#__PURE__*/function () {\n  function NameMap() {\n    _classCallCheck(this, NameMap);\n    this.kvs = new Map();\n  }\n  _createClass(NameMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      this.kvs.set(normalize(key), value);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.kvs.get(normalize(key));\n    }\n  }, {\n    key: \"update\",\n    value: function update(key, updater) {\n      var origin = this.get(key);\n      var next = updater(origin);\n      if (!next) {\n        this.delete(key);\n      } else {\n        this.set(key, next);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      this.kvs.delete(normalize(key));\n    }\n    // Since we only use this in test, let simply realize this\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      return _toConsumableArray(this.kvs.entries()).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        var cells = key.split(SPLIT);\n        return callback({\n          key: cells.map(function (cell) {\n            var _cell$match = cell.match(/^([^:]*):(.*)$/),\n              _cell$match2 = _slicedToArray(_cell$match, 3),\n              type = _cell$match2[1],\n              unit = _cell$match2[2];\n            return type === 'number' ? Number(unit) : unit;\n          }),\n          value: value\n        });\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n      this.map(function (_ref3) {\n        var key = _ref3.key,\n          value = _ref3.value;\n        json[key.join('.')] = value;\n        return null;\n      });\n      return json;\n    }\n  }]);\n  return NameMap;\n}();\nexport default NameMap;"],"mappings":"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"},"metadata":{},"sourceType":"module"}