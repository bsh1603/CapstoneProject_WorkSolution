{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"treeExpandAction\", \"virtual\", \"listHeight\", \"listItemHeight\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\"];\nimport * as React from 'react';\nimport { BaseSelect } from 'rc-select';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useId from \"rc-select/es/hooks/useId\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport OptionList from \"./OptionList\";\nimport TreeNode from \"./TreeNode\";\nimport { formatStrategyValues, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from \"./utils/strategyUtil\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport LegacyContext from \"./LegacyContext\";\nimport useTreeData from \"./hooks/useTreeData\";\nimport { toArray, fillFieldNames, isNil } from \"./utils/valueUtil\";\nimport useCache from \"./hooks/useCache\";\nimport useRefFunc from \"./hooks/useRefFunc\";\nimport useDataEntities from \"./hooks/useDataEntities\";\nimport { fillAdditionalInfo, fillLegacyProps } from \"./utils/legacyUtil\";\nimport useCheckedKeys from \"./hooks/useCheckedKeys\";\nimport useFilterTreeData from \"./hooks/useFilterTreeData\";\nimport warningProps from \"./utils/warningPropsUtil\";\nimport warning from \"rc-util/es/warning\";\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      treeExpandAction = props.treeExpandAction,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple;\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      internalValue = _useMergedState2[0],\n      setInternalValue = _useMergedState2[1]; // ========================== Warning ===========================\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  ); // =========================== Search ===========================\n\n  var _useMergedState3 = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedSearchValue = _useMergedState4[0],\n      setSearchValue = _useMergedState4[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      } else if (rawLabel === undefined) {\n        // We try to find in current `labelInValue` value\n        var labelInValueItem = toLabeledValues(internalValue).find(function (labeledItem) {\n          return labeledItem.value === rawValue;\n        });\n        rawLabel = labelInValueItem.label;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues, internalValue]); // =========================== Values ===========================\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    }); // Back fill with origin label\n\n    var labeledValues = values.map(function (val) {\n      var targetItem = rawLabeledValues.find(function (item) {\n        return item.value === val;\n      });\n      return {\n        value: val,\n        label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n      };\n    });\n    var rawDisplayValues = convert2LabelValues(labeledValues);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, rawLabeledValues, convert2LabelValues, showCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      treeExpandAction: treeExpandAction\n    };\n  }, [virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect, treeExpandAction]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;","map":{"version":3,"names":["_extends","_toConsumableArray","_objectSpread","_slicedToArray","_objectWithoutProperties","_typeof","_excluded","React","BaseSelect","conductCheck","useId","useMergedState","OptionList","TreeNode","formatStrategyValues","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","TreeSelectContext","LegacyContext","useTreeData","toArray","fillFieldNames","isNil","useCache","useRefFunc","useDataEntities","fillAdditionalInfo","fillLegacyProps","useCheckedKeys","useFilterTreeData","warningProps","warning","isRawValue","value","TreeSelect","forwardRef","props","ref","id","_props$prefixCls","prefixCls","defaultValue","onChange","onSelect","onDeselect","searchValue","inputValue","onSearch","_props$autoClearSearc","autoClearSearchValue","filterTreeNode","_props$treeNodeFilter","treeNodeFilterProp","_props$showCheckedStr","showCheckedStrategy","treeNodeLabelProp","multiple","treeCheckable","treeCheckStrictly","labelInValue","fieldNames","treeDataSimpleMode","treeData","children","loadData","treeLoadedKeys","onTreeLoad","treeDefaultExpandAll","treeExpandedKeys","treeDefaultExpandedKeys","onTreeExpand","treeExpandAction","virtual","_props$listHeight","listHeight","_props$listItemHeight","listItemHeight","onDropdownVisibleChange","_props$dropdownMatchS","dropdownMatchSelectWidth","treeLine","treeIcon","showTreeIcon","switcherIcon","treeMotion","restProps","mergedId","treeConduction","mergedCheckable","mergedLabelInValue","mergedMultiple","_useMergedState","_useMergedState2","internalValue","setInternalValue","process","env","NODE_ENV","mergedFieldNames","useMemo","JSON","stringify","_useMergedState3","undefined","postState","search","_useMergedState4","mergedSearchValue","setSearchValue","onInternalSearch","searchText","mergedTreeData","_useDataEntities","keyEntities","valueEntities","splitRawValues","useCallback","newRawValues","missingRawValues","existRawValues","forEach","val","has","push","filteredTreeData","getLabel","item","titleList","_title","i","length","title","toLabeledValues","draftValues","values","map","convert2LabelValues","rawLabel","label","rawValue","rawHalfChecked","halfChecked","rawDisabled","entity","get","_rawLabel","node","disabled","labelInValueItem","find","labeledItem","rawMixedLabeledValues","_React$useMemo","fullCheckValues","halfCheckValues","_React$useMemo2","rawLabeledValues","rawHalfLabeledValues","rawValues","_useCheckedKeys","_useCheckedKeys2","rawCheckedValues","rawHalfCheckedValues","displayValues","displayKeys","key","_keyEntities$key$node","_keyEntities$key","_keyEntities$key$node2","labeledValues","targetItem","rawDisplayValues","firstVal","_item$label","_useCache","_useCache2","cachedDisplayValues","triggerChange","extra","source","eventValues","formattedKeyList","_ref","triggerValue","selected","returnRawValues","halfValues","filter","includes","concat","returnLabeledValues","additionalInfo","preValue","showPosition","checked","returnValues","onOptionSelect","selectedKey","_ref2","_node$mergedFieldName","selectedValue","v","_splitRawValues","keyList","checkedKeys","_conductCheck","_conductCheck2","halfCheckedKeys","onInternalDropdownVisibleChange","open","legacyParam","Object","defineProperty","onDisplayValuesChange","newValues","info","type","treeSelectContext","legacyContext","checkable","createElement","Provider","mode","emptyOptions","displayName","GenericTreeSelect"],"sources":["C:/Capstone_Project/testing/src/main/frontend/node_modules/rc-tree-select/es/TreeSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"treeExpandAction\", \"virtual\", \"listHeight\", \"listItemHeight\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\"];\nimport * as React from 'react';\nimport { BaseSelect } from 'rc-select';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useId from \"rc-select/es/hooks/useId\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport OptionList from \"./OptionList\";\nimport TreeNode from \"./TreeNode\";\nimport { formatStrategyValues, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from \"./utils/strategyUtil\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport LegacyContext from \"./LegacyContext\";\nimport useTreeData from \"./hooks/useTreeData\";\nimport { toArray, fillFieldNames, isNil } from \"./utils/valueUtil\";\nimport useCache from \"./hooks/useCache\";\nimport useRefFunc from \"./hooks/useRefFunc\";\nimport useDataEntities from \"./hooks/useDataEntities\";\nimport { fillAdditionalInfo, fillLegacyProps } from \"./utils/legacyUtil\";\nimport useCheckedKeys from \"./hooks/useCheckedKeys\";\nimport useFilterTreeData from \"./hooks/useFilterTreeData\";\nimport warningProps from \"./utils/warningPropsUtil\";\nimport warning from \"rc-util/es/warning\";\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      treeExpandAction = props.treeExpandAction,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple;\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      internalValue = _useMergedState2[0],\n      setInternalValue = _useMergedState2[1]; // ========================== Warning ===========================\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  ); // =========================== Search ===========================\n\n  var _useMergedState3 = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedSearchValue = _useMergedState4[0],\n      setSearchValue = _useMergedState4[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      } else if (rawLabel === undefined) {\n        // We try to find in current `labelInValue` value\n        var labelInValueItem = toLabeledValues(internalValue).find(function (labeledItem) {\n          return labeledItem.value === rawValue;\n        });\n        rawLabel = labelInValueItem.label;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues, internalValue]); // =========================== Values ===========================\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    }); // Back fill with origin label\n\n    var labeledValues = values.map(function (val) {\n      var targetItem = rawLabeledValues.find(function (item) {\n        return item.value === val;\n      });\n      return {\n        value: val,\n        label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n      };\n    });\n    var rawDisplayValues = convert2LabelValues(labeledValues);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, rawLabeledValues, convert2LabelValues, showCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      treeExpandAction: treeExpandAction\n    };\n  }, [virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect, treeExpandAction]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;"],"mappings":"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"},"metadata":{},"sourceType":"module"}